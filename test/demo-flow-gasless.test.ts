/**
 * Demo Flow - Account Abstraction
 * 
 * File n√†y demo c√°c t√≠nh nƒÉng ch√≠nh c·ªßa Account Abstraction (ERC-4337):
 * 1. T·∫°o v√† s·ª≠ d·ª•ng Smart Account
 * 2. Th·ª±c hi·ªán giao d·ªãch ƒë∆°n l·∫ª v√† batch
 * 3. S·ª≠ d·ª•ng Paymaster ƒë·ªÉ tr·∫£ gas
 * 
 */

import './aa.init' // Import c√°c setup c·∫ßn thi·∫øt cho test
import { Wallet } from 'ethers'
import { ethers } from 'hardhat'
import { expect } from 'chai'

// Import c√°c contract types ƒë∆∞·ª£c generate t·ª´ TypeChain
import {
  EntryPoint,                    // Contract ch√≠nh c·ªßa ERC-4337
  SimpleAccount,                 // Smart Account implementation
  SimpleAccountFactory,          // Factory ƒë·ªÉ t·∫°o SimpleAccount
  TestCounter,                   // Contract test ƒë·ªÉ demo execution
  TestCounter__factory,
  TestPaymasterAcceptAll,        // Paymaster test ƒë·ªÉ tr·∫£ gas
  TestPaymasterAcceptAll__factory
} from '../typechain'

// Import c√°c utility functions ƒë·ªÉ t·∫°o v√† x·ª≠ l√Ω UserOperation
import {
  fillAndSign,      // T·∫°o v√† k√Ω UserOperation
  fillSignAndPack,  // T·∫°o, k√Ω v√† pack UserOperation
  packUserOp        // Pack UserOperation th√†nh format c·∫ßn thi·∫øt
} from './UserOp'

// Import c√°c helper functions t·ª´ testutils
import {
  createAccount,        // T·∫°o SimpleAccount m·ªõi
  createAccountOwner,   // T·∫°o wallet owner cho account
  createAddress,        // T·∫°o ƒë·ªãa ch·ªâ random
  deployEntryPoint,     // Deploy EntryPoint contract
  fund                  // Fund account v·ªõi ETH
} from './testutils'
import { parseEther } from 'ethers/lib/utils'

describe('Demo Flow - Account Abstraction', function () {
  // Khai b√°o c√°c bi·∫øn global s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng trong c√°c test
  let entryPoint: EntryPoint              // Contract EntryPoint - trung t√¢m c·ªßa ERC-4337
  let simpleAccountFactory: SimpleAccountFactory  // Factory ƒë·ªÉ t·∫°o SimpleAccount
  let accountOwner: Wallet                // Wallet owner c·ªßa SimpleAccount
  let simpleAccount: SimpleAccount        // Smart Account instance
  let counter: TestCounter                // Contract test ƒë·ªÉ demo execution
  const ethersSigner = ethers.provider.getSigner()  // Signer m·∫∑c ƒë·ªãnh c·ªßa Hardhat

  before(async function () {
    this.timeout(20000)  // Set timeout 20 gi√¢y cho setup
    
    // === B∆Ø·ªöC 1: Deploy EntryPoint ===
    // EntryPoint l√† contract ch√≠nh c·ªßa ERC-4337, x·ª≠ l√Ω t·∫•t c·∫£ UserOperations
    entryPoint = await deployEntryPoint()
    console.log('EntryPoint deployed at:', entryPoint.address)

    // === B∆Ø·ªöC 2: T·∫°o Account Owner ===
    // Account owner l√† wallet th√¥ng th∆∞·ªùng (EOA) s·∫Ω s·ªü h·ªØu Smart Account
    accountOwner = createAccountOwner()
    console.log('EOA account:', accountOwner.address)

    // === B∆Ø·ªöC 3: T·∫°o SimpleAccount ===
    // SimpleAccount l√† Smart Account implementation ƒë∆°n gi·∫£n
    // N√≥ cho ph√©p owner th·ª±c hi·ªán c√°c giao d·ªãch th√¥ng qua EntryPoint
    const { proxy: account, accountFactory: factory } = await createAccount(
      ethersSigner, 
      accountOwner.address, 
      entryPoint.address
    )
    simpleAccount = account
    simpleAccountFactory = factory
    console.log('Simple Contract Account created at:', simpleAccount.address)

    // === B∆Ø·ªöC 5: Deploy Test Counter ===
    // TestCounter l√† contract ƒë∆°n gi·∫£n ƒë·ªÉ demo vi·ªác th·ª±c hi·ªán giao d·ªãch
    counter = await new TestCounter__factory(ethersSigner).deploy()
    console.log('TestCounter deployed at:', counter.address)
  })

  describe('Paymaster Integration', () => {
    // === PAYMASTER L√Ä G√å? ===
    // Paymaster l√† contract cho ph√©p b√™n th·ª© 3 tr·∫£ gas cho user
    // Thay v√¨ user ph·∫£i c√≥ ETH ƒë·ªÉ tr·∫£ gas, paymaster s·∫Ω tr·∫£ thay
    // ƒêi·ªÅu n√†y m·ªü ra kh·∫£ nƒÉng:
    // - DApp tr·∫£ gas cho user
    // - Sponsor transaction
    // - Gasless transaction
    
    let paymaster: TestPaymasterAcceptAll  // Paymaster contract    
    before(async () => {
      // === DEPLOY PAYMASTER ===
      // TestPaymasterAcceptAll l√† paymaster test ch·∫•p nh·∫≠n t·∫•t c·∫£ request
      paymaster = await new TestPaymasterAcceptAll__factory(ethersSigner).deploy(entryPoint.address)
      
      // Paymaster c·∫ßn stake ƒë·ªÉ ƒë·∫£m b·∫£o an to√†ne
      // Stake s·∫Ω b·ªã ph·∫°t n·∫øu paymaster ho·∫°t ƒë·ªông sai
      await paymaster.addStake(2, { value: parseEther('2') }) // Add stake
      
      // Paymaster c·∫ßn deposit ƒë·ªÉ tr·∫£ gas cho user
      await paymaster.deposit({ value: parseEther('1') }) // Add deposit
      console.log('‚úÖ Paymaster deployed at:', paymaster.address)
    })

    it('should execute transaction with paymaster sponsorship', async () => {
      console.log('\nüîÑ Testing paymaster sponsorship...')
      
      // === CHU·∫®N B·ªä GIAO D·ªäCH ===
      // T·∫°o giao d·ªãch t∆∞∆°ng t·ª± nh∆∞ test tr∆∞·ªõc
      const countData = await counter.populateTransaction.count()
      const accountExec = await simpleAccount.populateTransaction.execute(
        counter.address,
        0,
        countData.data!
      )

      // === T·∫†O USEROPERATION V·ªöI PAYMASTER ===
      // Kh√°c bi·ªát ch√≠nh: th√™m paymaster v√†o UserOperation
      const userOp = await fillSignAndPack({
        sender: simpleAccount.address,
        callData: accountExec.data,
        paymaster: paymaster.address,              // ƒê·ªãa ch·ªâ paymaster
        paymasterVerificationGasLimit: 1e6,       // Gas cho paymaster validation
        paymasterPostOpGasLimit: 1e5,             // Gas cho paymaster postOp
        verificationGasLimit: 1e6,
        callGasLimit: 1e6
      }, accountOwner, entryPoint)

      // === TH·ª∞C HI·ªÜN GIAO D·ªäCH V·ªöI PAYMASTER ===
      const beneficiary = createAddress()
      const paymasterDepositBefore = await entryPoint.balanceOf(paymaster.address)
      const countBefore = await counter.counters(simpleAccount.address)
      
      // === LOG MINH CH·ª®NG AI TR·∫¢ GAS ===
      const accountBalance2Before = await ethers.provider.getBalance(simpleAccount.address)
      const ethersSignerBalanceBefore = await ethers.provider.getBalance(await ethersSigner.getAddress())

      console.log('Transaction exec log start ------------------------------')
      const tx = await entryPoint.handleOps([userOp], beneficiary, {
        maxFeePerGas: 1e9,
        gasLimit: 1e7
      })
      console.log('Transaction exec log end ------------------------------')
      const receipt = await tx.wait()

      // === KI·ªÇM TRA K·∫æT QU·∫¢ ===
      const paymasterDepositAfter = await entryPoint.balanceOf(paymaster.address)
      const countAfter = await counter.counters(simpleAccount.address)
      const accountBalance2After = await ethers.provider.getBalance(simpleAccount.address)
      const ethersSignerBalanceAfter = await ethers.provider.getBalance(await ethersSigner.getAddress())

      expect(countAfter.toNumber()).to.equal(countBefore.toNumber() + 1)
      expect(paymasterDepositAfter).to.be.lt(paymasterDepositBefore) // Paymaster ƒë√£ tr·∫£ gas

      console.log('‚úÖ Paymaster transaction executed successfully')
      console.log('   - Counter before:', countBefore.toNumber())
      console.log('   - Counter after:', countAfter.toNumber())
      console.log('   - Gas used:', receipt.gasUsed.toString())
      
      // === LOG K·∫æT QU·∫¢ GAS PAYMENT ===
      console.log('üí∞ Gas Payment Results (Paymaster):')
      console.log('   - Account2 balance change:', ethers.utils.formatEther(accountBalance2Before.sub(accountBalance2After)), 'ETH')
      console.log('   - Paymaster deposit change:', ethers.utils.formatEther(paymasterDepositBefore.sub(paymasterDepositAfter)), 'ETH')
      console.log('   - EthersSigner paid:', ethers.utils.formatEther(ethersSignerBalanceBefore.sub(ethersSignerBalanceAfter)), 'ETH')
    })
  })

})
