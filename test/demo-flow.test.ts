/**
 * Demo Flow - Account Abstraction
 * 
 * File n√†y demo c√°c t√≠nh nƒÉng ch√≠nh c·ªßa Account Abstraction (ERC-4337):
 * 1. T·∫°o v√† s·ª≠ d·ª•ng Smart Account
 * 2. Th·ª±c hi·ªán giao d·ªãch ƒë∆°n l·∫ª v√† batch
 * 3. S·ª≠ d·ª•ng Paymaster ƒë·ªÉ tr·∫£ gas
 * 
 */

import './aa.init' // Import c√°c setup c·∫ßn thi·∫øt cho test
import { Wallet } from 'ethers'
import { ethers } from 'hardhat'
import { expect } from 'chai'

// Import c√°c contract types ƒë∆∞·ª£c generate t·ª´ TypeChain
import {
  EntryPoint,                    // Contract ch√≠nh c·ªßa ERC-4337
  SimpleAccount,                 // Smart Account implementation
  SimpleAccountFactory,          // Factory ƒë·ªÉ t·∫°o SimpleAccount
  TestCounter,                   // Contract test ƒë·ªÉ demo execution
  TestCounter__factory,
  TestPaymasterAcceptAll,        // Paymaster test ƒë·ªÉ tr·∫£ gas
  TestPaymasterAcceptAll__factory
} from '../typechain'

// Import c√°c utility functions ƒë·ªÉ t·∫°o v√† x·ª≠ l√Ω UserOperation
import {
  fillAndSign,      // T·∫°o v√† k√Ω UserOperation
  fillSignAndPack,  // T·∫°o, k√Ω v√† pack UserOperation
  packUserOp        // Pack UserOperation th√†nh format c·∫ßn thi·∫øt
} from './UserOp'

// Import c√°c helper functions t·ª´ testutils
import {
  createAccount,        // T·∫°o SimpleAccount m·ªõi
  createAccountOwner,   // T·∫°o wallet owner cho account
  createAddress,        // T·∫°o ƒë·ªãa ch·ªâ random
  deployEntryPoint,     // Deploy EntryPoint contract
  fund                  // Fund account v·ªõi ETH
} from './testutils'
import { parseEther } from 'ethers/lib/utils'

describe('Demo Flow - Account Abstraction', function () {
  // Khai b√°o c√°c bi·∫øn global s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng trong c√°c test
  let entryPoint: EntryPoint              // Contract EntryPoint - trung t√¢m c·ªßa ERC-4337
  let simpleAccountFactory: SimpleAccountFactory  // Factory ƒë·ªÉ t·∫°o SimpleAccount
  let accountOwner: Wallet                // Wallet owner c·ªßa SimpleAccount
  let simpleAccount: SimpleAccount        // Smart Account instance
  let counter: TestCounter                // Contract test ƒë·ªÉ demo execution
  const ethersSigner = ethers.provider.getSigner()  // Signer m·∫∑c ƒë·ªãnh c·ªßa Hardhat

  before(async function () {
    this.timeout(20000)  // Set timeout 20 gi√¢y cho setup
    
    // === B∆Ø·ªöC 1: Deploy EntryPoint ===
    // EntryPoint l√† contract ch√≠nh c·ªßa ERC-4337, x·ª≠ l√Ω t·∫•t c·∫£ UserOperations
    entryPoint = await deployEntryPoint()
    console.log('EntryPoint deployed at:', entryPoint.address)

    // === B∆Ø·ªöC 2: T·∫°o Account Owner ===
    // Account owner l√† wallet th√¥ng th∆∞·ªùng (EOA) s·∫Ω s·ªü h·ªØu Smart Account
    accountOwner = createAccountOwner()
    console.log('EOA account:', accountOwner.address)

    // === B∆Ø·ªöC 3: T·∫°o SimpleAccount ===
    // SimpleAccount l√† Smart Account implementation ƒë∆°n gi·∫£n
    // N√≥ cho ph√©p owner th·ª±c hi·ªán c√°c giao d·ªãch th√¥ng qua EntryPoint
    const { proxy: account, accountFactory: factory } = await createAccount(
      ethersSigner, 
      accountOwner.address, 
      entryPoint.address
    )
    simpleAccount = account
    simpleAccountFactory = factory
    console.log('Simple Contract Account created at:', simpleAccount.address)

    // === B∆Ø·ªöC 4: Fund Contract Account ===
    // C·∫ßn fund account v·ªõi 1 ETH ƒë·ªÉ c√≥ th·ªÉ tr·∫£ gas cho c√°c giao d·ªãch
    await fund(simpleAccount)
    console.log('Contract Account funded 1 ETH')

    // === B∆Ø·ªöC 5: Deploy Test Counter ===
    // TestCounter l√† contract ƒë∆°n gi·∫£n ƒë·ªÉ demo vi·ªác th·ª±c hi·ªán giao d·ªãch
    counter = await new TestCounter__factory(ethersSigner).deploy()
    console.log('TestCounter deployed at:', counter.address)
  })

  describe('Basic Account Operations', () => {
    it('should execute simple transaction', async () => {
      
      // === CHU·∫®N B·ªä GIAO D·ªäCH ===
      // T·∫°o callData ƒë·ªÉ g·ªçi function count() c·ªßa TestCounter
      const countData = await counter.populateTransaction.count()
      
      // T·∫°o callData ƒë·ªÉ SimpleAccount th·ª±c hi·ªán giao d·ªãch
      // SimpleAccount.execute(target, value, data) s·∫Ω g·ªçi target v·ªõi data
      const accountExec = await simpleAccount.populateTransaction.execute(
        counter.address,  // target: ƒë·ªãa ch·ªâ contract c·∫ßn g·ªçi
        0,                // value: ETH g·ª≠i k√®m (0 trong tr∆∞·ªùng h·ª£p n√†y)
        countData.data!   // data: callData c·ªßa function count()
      )

      // === T·∫†O USEROPERATION ===
      // UserOperation l√† ƒë·ªëi t∆∞·ª£ng ch√≠nh trong ERC-4337
      // N√≥ ch·ª©a t·∫•t c·∫£ th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch
      const userOp = await fillSignAndPack({
        sender: simpleAccount.address,    // ƒê·ªãa ch·ªâ Smart Account
        callData: accountExec.data,       // D·ªØ li·ªáu giao d·ªãch
        verificationGasLimit: 1e6,        // Gas limit cho validation
        callGasLimit: 1e6                 // Gas limit cho execution
      }, accountOwner, entryPoint)        // K√Ω b·ªüi account owner

      // === TH·ª∞C HI·ªÜN GIAO D·ªäCH ===
      const beneficiary = createAddress()  // ƒê·ªãa ch·ªâ nh·∫≠n gas refund
      const countBefore = await counter.counters(simpleAccount.address)
      
      // === LOG MINH CH·ª®NG AI TR·∫¢ GAS ===
      // const accountDepositBefore = await entryPoint.balanceOf(simpleAccount.address)
      const accountBalanceBefore = await ethers.provider.getBalance(simpleAccount.address)
      const ethersSignerBalanceBefore = await ethers.provider.getBalance(await ethersSigner.getAddress())
      
      // G·ª≠i UserOperation ƒë·∫øn EntryPoint ƒë·ªÉ x·ª≠ l√Ω
      console.log('Transaction exec log start ------------------------------')
      const tx = await entryPoint.handleOps([userOp], beneficiary, {
        maxFeePerGas: 1e9,    // Max fee per gas
        gasLimit: 1e7         // Gas limit cho transaction
      })
      console.log('Transaction exec log end ------------------------------')

      const receipt = await tx.wait()

      // === KI·ªÇM TRA K·∫æT QU·∫¢ ===
      const countAfter = await counter.counters(simpleAccount.address)
      // const accountDepositAfter = await entryPoint.balanceOf(simpleAccount.address)
      const ethersSignerBalanceAfter = await ethers.provider.getBalance(await ethersSigner.getAddress())
      const accountBalanceAfter = await ethers.provider.getBalance(simpleAccount.address)
      
      expect(countAfter.toNumber()).to.equal(countBefore.toNumber() + 1)
      
      console.log('‚úÖ Transaction executed successfully')
      console.log('   - Counter before:', countBefore.toNumber())
      console.log('   - Counter after:', countAfter.toNumber())
      console.log('   - Gas used:', receipt.gasUsed.toString())
      
      // === LOG K·∫æT QU·∫¢ GAS PAYMENT ===
      console.log('üí∞ Gas Payment Results:')
      console.log('   - Simple Contract Account balance paid:', ethers.utils.formatEther(accountBalanceBefore.sub(accountBalanceAfter)))
      console.log('   - EthersSigner paid:', ethers.utils.formatEther(ethersSignerBalanceBefore.sub(ethersSignerBalanceAfter)), 'ETH')
    })

    // it('should execute batch transactions', async () => {
    //   console.log('\nüîÑ Testing batch transactions...')
      
    //   // === CHU·∫®N B·ªä BATCH GIAO D·ªäCH ===
    //   // T·∫°o 2 ƒë·ªãa ch·ªâ target ƒë·ªÉ nh·∫≠n ETH
    //   const target1 = createAddress()
    //   const target2 = createAddress()
      
    //   // T·∫°o callData cho batch execution
    //   // executeBatch cho ph√©p th·ª±c hi·ªán nhi·ªÅu giao d·ªãch trong 1 UserOperation
    //   const batchData = simpleAccount.interface.encodeFunctionData('executeBatch', [[
    //     { target: target1, value: parseEther('0.1'), data: '0x' },  // G·ª≠i 0.1 ETH ƒë·∫øn target1
    //     { target: target2, value: parseEther('0.05'), data: '0x' }  // G·ª≠i 0.05 ETH ƒë·∫øn target2
    //   ]])

    //   // === T·∫†O USEROPERATION CHO BATCH ===
    //   const userOp = await fillSignAndPack({
    //     sender: simpleAccount.address,
    //     callData: batchData,
    //     verificationGasLimit: 1e6,
    //     callGasLimit: 1e6
    //   }, accountOwner, entryPoint)

    //   // === TH·ª∞C HI·ªÜN BATCH GIAO D·ªäCH ===
    //   const beneficiary = createAddress()
    //   const balance1Before = await ethers.provider.getBalance(target1)
    //   const balance2Before = await ethers.provider.getBalance(target2)
      
    //   // === LOG MINH CH·ª®NG AI TR·∫¢ GAS ===
    //   const accountDepositBefore = await entryPoint.balanceOf(simpleAccount.address)
    //   const ethersSignerBalanceBefore = await ethers.provider.getBalance(await ethersSigner.getAddress())
      
    //   console.log('üí∞ Gas Payment Analysis (Batch):')
    //   console.log('   - Account deposit before:', ethers.utils.formatEther(accountDepositBefore), 'ETH')
    //   console.log('   - EthersSigner balance before:', ethers.utils.formatEther(ethersSignerBalanceBefore), 'ETH')

    //   const tx = await entryPoint.handleOps([userOp], beneficiary, {
    //     maxFeePerGas: 1e9,
    //     gasLimit: 1e7
    //   })
    //   const receipt = await tx.wait()

    //   // === KI·ªÇM TRA K·∫æT QU·∫¢ ===
    //   const balance1After = await ethers.provider.getBalance(target1)
    //   const balance2After = await ethers.provider.getBalance(target2)
    //   const accountDepositAfter = await entryPoint.balanceOf(simpleAccount.address)
    //   const ethersSignerBalanceAfter = await ethers.provider.getBalance(await ethersSigner.getAddress())

    //   expect(balance1After).to.equal(balance1Before.add(parseEther('0.1')))
    //   expect(balance2After).to.equal(balance2Before.add(parseEther('0.05')))
      
    //   console.log('‚úÖ Batch transaction executed successfully')
    //   console.log('   - Target1 received:', parseEther('0.1').toString())
    //   console.log('   - Target2 received:', parseEther('0.05').toString())
    //   console.log('   - Gas used:', receipt.gasUsed.toString())
      
    //   // === LOG K·∫æT QU·∫¢ GAS PAYMENT ===
    //   console.log('üí∞ Gas Payment Results (Batch):')
    //   console.log('   - Account deposit after:', ethers.utils.formatEther(accountDepositAfter), 'ETH')
    //   console.log('   - EthersSigner balance after:', ethers.utils.formatEther(ethersSignerBalanceAfter), 'ETH')
    //   console.log('   - Account deposit change:', ethers.utils.formatEther(accountDepositAfter.sub(accountDepositBefore)), 'ETH (negative = paid gas)')
    //   console.log('   - EthersSigner paid (balance decrease):', ethers.utils.formatEther(ethersSignerBalanceBefore.sub(ethersSignerBalanceAfter)), 'ETH')
    //   console.log('   - Beneficiary received gas refund:', ethers.utils.formatEther(await ethers.provider.getBalance(beneficiary)), 'ETH')
    //   console.log('   - Note: Account paid gas for UserOperation execution')
    // })
  })

  // describe('Paymaster Integration', () => {
  //   // === PAYMASTER L√Ä G√å? ===
  //   // Paymaster l√† contract cho ph√©p b√™n th·ª© 3 tr·∫£ gas cho user
  //   // Thay v√¨ user ph·∫£i c√≥ ETH ƒë·ªÉ tr·∫£ gas, paymaster s·∫Ω tr·∫£ thay
  //   // ƒêi·ªÅu n√†y m·ªü ra kh·∫£ nƒÉng:
  //   // - DApp tr·∫£ gas cho user
  //   // - Sponsor transaction
  //   // - Gasless transaction
    
  //   let paymaster: TestPaymasterAcceptAll  // Paymaster contract
  //   let account2Owner: Wallet              // Owner c·ªßa account th·ª© 2
  //   let account2: SimpleAccount            // Account th·ª© 2 ƒë·ªÉ test paymaster

  //   before(async () => {
  //     // === DEPLOY PAYMASTER ===
  //     // TestPaymasterAcceptAll l√† paymaster test ch·∫•p nh·∫≠n t·∫•t c·∫£ request
  //     paymaster = await new TestPaymasterAcceptAll__factory(ethersSigner).deploy(entryPoint.address)
      
  //     // Paymaster c·∫ßn stake ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n
  //     // Stake s·∫Ω b·ªã ph·∫°t n·∫øu paymaster ho·∫°t ƒë·ªông sai
  //     await paymaster.addStake(2, { value: parseEther('2') }) // Add stake
      
  //     // Paymaster c·∫ßn deposit ƒë·ªÉ tr·∫£ gas cho user
  //     await paymaster.deposit({ value: parseEther('1') }) // Add deposit
  //     console.log('‚úÖ Paymaster deployed at:', paymaster.address)

  //     // === T·∫†O ACCOUNT TH·ª® 2 ===
  //     // T·∫°o account ri√™ng ƒë·ªÉ test paymaster (kh√¥ng fund ETH)
  //     account2Owner = createAccountOwner()
  //     const { proxy: account2Proxy } = await createAccount(
  //       ethersSigner,
  //       account2Owner.address,
  //       entryPoint.address
  //     )
  //     account2 = account2Proxy
  //     console.log('‚úÖ Account2 created at:', account2.address)
  //   })

  //   it('should execute transaction with paymaster sponsorship', async () => {
  //     console.log('\nüîÑ Testing paymaster sponsorship...')
      
  //     // === CHU·∫®N B·ªä GIAO D·ªäCH ===
  //     // T·∫°o giao d·ªãch t∆∞∆°ng t·ª± nh∆∞ test tr∆∞·ªõc
  //     const countData = await counter.populateTransaction.count()
  //     const accountExec = await account2.populateTransaction.execute(
  //       counter.address,
  //       0,
  //       countData.data!
  //     )

  //     // === T·∫†O USEROPERATION V·ªöI PAYMASTER ===
  //     // Kh√°c bi·ªát ch√≠nh: th√™m paymaster v√†o UserOperation
  //     const userOp = await fillSignAndPack({
  //       sender: account2.address,
  //       callData: accountExec.data,
  //       paymaster: paymaster.address,              // ƒê·ªãa ch·ªâ paymaster
  //       paymasterVerificationGasLimit: 1e6,       // Gas cho paymaster validation
  //       paymasterPostOpGasLimit: 1e5,             // Gas cho paymaster postOp
  //       verificationGasLimit: 1e6,
  //       callGasLimit: 1e6
  //     }, account2Owner, entryPoint)

  //     // === TH·ª∞C HI·ªÜN GIAO D·ªäCH V·ªöI PAYMASTER ===
  //     const beneficiary = createAddress()
  //     const paymasterDepositBefore = await entryPoint.balanceOf(paymaster.address)
  //     const countBefore = await counter.counters(account2.address)
      
  //     // === LOG MINH CH·ª®NG AI TR·∫¢ GAS ===
  //     const account2DepositBefore = await entryPoint.balanceOf(account2.address)
  //     const ethersSignerBalanceBefore = await ethers.provider.getBalance(await ethersSigner.getAddress())
      
  //     console.log('üí∞ Gas Payment Analysis (Paymaster):')
  //     console.log('   - Account2 deposit before:', ethers.utils.formatEther(account2DepositBefore), 'ETH')
  //     console.log('   - Paymaster deposit before:', ethers.utils.formatEther(paymasterDepositBefore), 'ETH')
  //     console.log('   - EthersSigner balance before:', ethers.utils.formatEther(ethersSignerBalanceBefore), 'ETH')

  //     const tx = await entryPoint.handleOps([userOp], beneficiary, {
  //       maxFeePerGas: 1e9,
  //       gasLimit: 1e7
  //     })
  //     const receipt = await tx.wait()

  //     // === KI·ªÇM TRA K·∫æT QU·∫¢ ===
  //     const paymasterDepositAfter = await entryPoint.balanceOf(paymaster.address)
  //     const countAfter = await counter.counters(account2.address)
  //     const account2DepositAfter = await entryPoint.balanceOf(account2.address)
  //     const ethersSignerBalanceAfter = await ethers.provider.getBalance(await ethersSigner.getAddress())

  //     expect(countAfter.toNumber()).to.equal(countBefore.toNumber() + 1)
  //     expect(paymasterDepositAfter).to.be.lt(paymasterDepositBefore) // Paymaster ƒë√£ tr·∫£ gas

  //     console.log('‚úÖ Paymaster transaction executed successfully')
  //     console.log('   - Counter before:', countBefore.toNumber())
  //     console.log('   - Counter after:', countAfter.toNumber())
  //     console.log('   - Gas used:', receipt.gasUsed.toString())
      
  //     // === LOG K·∫æT QU·∫¢ GAS PAYMENT ===
  //     console.log('üí∞ Gas Payment Results (Paymaster):')
  //     console.log('   - Account2 deposit after:', ethers.utils.formatEther(account2DepositAfter), 'ETH')
  //     console.log('   - Paymaster deposit after:', ethers.utils.formatEther(paymasterDepositAfter), 'ETH')
  //     console.log('   - EthersSigner balance after:', ethers.utils.formatEther(ethersSignerBalanceAfter), 'ETH')
  //     console.log('   - Account2 deposit change:', ethers.utils.formatEther(account2DepositAfter.sub(account2DepositBefore)), 'ETH (no change = gasless)')
  //     console.log('   - Paymaster deposit change:', ethers.utils.formatEther(paymasterDepositAfter.sub(paymasterDepositBefore)), 'ETH (negative = paid gas)')
  //     console.log('   - EthersSigner paid (balance decrease):', ethers.utils.formatEther(ethersSignerBalanceBefore.sub(ethersSignerBalanceAfter)), 'ETH')
  //     console.log('   - Beneficiary received gas refund:', ethers.utils.formatEther(await ethers.provider.getBalance(beneficiary)), 'ETH')
  //     console.log('   - Note: Paymaster paid gas, Account2 had gasless transaction')
  //   })
  // })

})
